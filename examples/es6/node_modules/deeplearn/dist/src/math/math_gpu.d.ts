import { ConvInfo } from './conv_util';
import { MatrixOrientation, NDArrayMath } from './math';
import { Array1D, Array2D, Array3D, Array4D, NDArray, Scalar } from './ndarray';
import { GPGPUContext } from './webgl/gpgpu_context';
import { TextureManager } from './webgl/texture_manager';
export declare class NDArrayMathGPU extends NDArrayMath {
    private gpgpu;
    private textureManager;
    private binaryCache;
    private gpgpuCreatedLocally;
    constructor(gpgpu?: GPGPUContext, safeMode?: boolean);
    getGPGPUContext(): GPGPUContext;
    protected cloneInternal<T extends NDArray>(ndarray: T): T;
    protected slice2DInternal(input: Array2D, beginRowCol: [number, number], sizeRowCol: [number, number]): Array2D;
    protected copy2DInternal(source: Array2D, sourceBeginRowCol: [number, number], sourceSizeRowCol: [number, number], dest: Array2D, destBeginRowCol: [number, number], destSizeRowCol: [number, number]): void;
    protected concat3DInternal(x1: Array3D, x2: Array3D, axis: number): Array3D;
    protected scaledArrayAddInternal<T extends NDArray>(c1: Scalar, a: T, c2: Scalar, b: T): T;
    protected negInternal<T extends NDArray>(a: T): T;
    private makeOutputArray<T>(shape);
    private compileAndRun<T, K>(program, inputs, output?, customSetup?);
    protected matMulInternal(a: Array2D, b: Array2D, aOrientation: MatrixOrientation, bOrientation: MatrixOrientation): Array2D;
    protected multiplyInternal<T extends NDArray>(a: T, b: T): T;
    protected batchNormalization3DInternal(x: Array3D, mean: Array3D | Array1D, variance: Array3D | Array1D, varianceEpsilon: number | null, scale?: Array3D | Array1D, offset?: Array3D | Array1D): Array3D;
    protected switchDimInternal<T extends NDArray>(a: T, newDim: number[]): T;
    protected sumInternal(a: NDArray): Scalar;
    protected argMinInternal(a: NDArray): Scalar;
    protected argMaxInternal(a: NDArray): Scalar;
    protected argMaxEqualsInternal(x1: NDArray, x2: NDArray): Scalar;
    protected topKInternal(ndarray: NDArray, k: number): {
        values: Array1D;
        indices: Array1D;
    };
    protected minInternal(a: NDArray): Scalar;
    protected maxInternal(a: NDArray): Scalar;
    protected divideInternal<T extends NDArray>(a: T, b: T): T;
    protected addInternal<T extends NDArray>(a: T, b: T): T;
    protected subInternal<T extends NDArray>(a: T, b: T): T;
    protected logSumExpInternal(a: NDArray): Scalar;
    protected expInternal<T extends NDArray>(a: T): T;
    protected logInternal<T extends NDArray>(a: T): T;
    protected sqrtInternal<T extends NDArray>(a: T): T;
    protected reluInternal<T extends NDArray>(a: T): T;
    protected absInternal<T extends NDArray>(a: T): T;
    protected sigmoidInternal<T extends NDArray>(a: T): T;
    protected sinInternal<T extends NDArray>(a: T): T;
    protected cosInternal<T extends NDArray>(a: T): T;
    protected tanInternal<T extends NDArray>(a: T): T;
    protected asinInternal<T extends NDArray>(a: T): T;
    protected acosInternal<T extends NDArray>(a: T): T;
    protected atanInternal<T extends NDArray>(a: T): T;
    protected sinhInternal<T extends NDArray>(a: T): T;
    protected coshInternal<T extends NDArray>(a: T): T;
    protected tanhInternal<T extends NDArray>(a: T): T;
    protected stepInternal<T extends NDArray>(a: T): T;
    protected conv2dInternal(x: Array3D, filter: Array4D, bias: Array1D | null, convInfo: ConvInfo): Array3D;
    protected conv2dDerInputInternal(dy: Array3D, filter: Array4D, convInfo: ConvInfo): Array3D;
    protected conv2dDerFilterInternal(x: Array3D, dY: Array3D, convInfo: ConvInfo): Array4D;
    protected conv2dDerBiasInternal(dY: Array3D): Array1D;
    protected maxPoolInternal(x: Array3D, convInfo: ConvInfo): Array3D;
    protected minPoolInternal(x: Array3D, convInfo: ConvInfo): Array3D;
    protected avgPoolInternal(x: Array3D, convInfo: ConvInfo): Array3D;
    protected maxPoolBackpropInternal(dy: Array3D, x: Array3D, convInfo: ConvInfo): Array3D;
    protected resizeBilinear3DInternal(x: Array3D, newShape2D: [number, number], alignCorners: boolean): Array3D;
    private getAndSaveBinary(key, getBinary);
    getTextureManager(): TextureManager;
    dispose(): void;
}
